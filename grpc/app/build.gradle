/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.google.protobuf' version '0.8.17'
}


repositories {
  maven { // The google mirror is less flaky than mavenCentral()
    url "https://maven-central.storage-download.googleapis.com/maven2/" 
  }
  mavenCentral()
  mavenLocal()
  // Use JCenter for resolving dependencies.
  jcenter()
}

// Declare and update the version in our release process.
def grpcVersion = '1.40.1' // CURRENT_GRPC_VERSION
def protobufVersion = '3.17.3'
def protocVersion = protobufVersion

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'
    testImplementation 'io.grpc:grpc-testing:1.40.1' // or simply use ${grpcVersion} in place of 1.40.1
    testImplementation 'org.mockito:mockito-core:3.4.0' 

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'io.grpc:grpc-netty-shaded:1.40.1' // or simply use ${grpcVersion} in place of 1.40.1
    implementation 'io.grpc:grpc-protobuf:1.40.1' // or simply use ${grpcVersion} in place of 1.40.1
    implementation 'io.grpc:grpc-stub:1.40.1' // or simply use ${grpcVersion} in place of 1.40.1
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.40.1' // or simply use ${grpcVersion} in place of 1.40.1
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}


// Inform IDEs like IntelliJ IDEA, VSCode, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task helloServer(type: CreateStartScripts) {
    mainClassName = 'com.apidemo.grpc.HelloServer'
    applicationName = 'hello-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task helloClient(type: CreateStartScripts) {
    mainClassName = 'com.apidemo.grpc.HelloClient'
    applicationName = 'hello-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
  from(helloServer)
  from(helloClient)
  fileMode = 0755
}

// application {
//     // Define the main class for the application.
//     mainClass = 'com.apidemo.grpc.HelloServer'
// }
