plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//    id 'java'
    id 'application' // application plugin adds java plugin automatically
}

group 'com.apidemo'
version '0.0.1'
description = "First Spring Boot Application"

sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
// to customize web server from tomcat to jetty/undertow/netty  
// compile.exclude module: "spring-boot-starter-tomcat"
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {

  // spring boot Web MVC
  implementation 'org.springframework.boot:spring-boot-starter-web'

  // to change from spring web to spring webflux. comment above spring-boot-starter-web and add below line
  // that will also pull in spring-boot-starter-reactor-netty as transitive dependency
  // implementation 'org.springframework.boot:spring-boot-starter-webflux'

  // to customize web server from tomcat to jetty/undertow
  // compile("org.springframework.boot:spring-boot-starter-jetty")
  // compile("org.springframework.boot:spring-boot-starter-undertow")

  // Java Bean validation
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  // Logging Facade
  implementation ('org.slf4j:slf4j-api:1.7.32')
  // Lombok: Code Generation Annotation Library
  compileOnly 'org.projectlombok:lombok'
  // Gradle Annotatio Processor using Lombok annotation processor
  annotationProcessor 'org.projectlombok:lombok'
  // 
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  // configurations.all {
  //   exclude group: "org.slf4j", module: "slf4j-log4j12"
  //   exclude group: "log4j", module: "log4j"
  //   exclude group: "logback", module: "logback-classic"
  // }
  //implementation 'ch.qos.logback:logback-classic:1.2.6'
  //implementation 'ch.qos.logback:logback-core:1.2.6'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
    }
}


// test {
//   useJUnitPlatform()
// }

// Inform IDEs like IntelliJ IDEA, VSCode, Eclipse or NetBeans about the generated code.
// sourceSets {
//     main {
//         java {
//             srcDirs 'build/generated/sources/main/java'
// //            srcDirs 'build/generated/source/proto/main/java'
//         }
//     }
// }

// task helloServer(type: CreateStartScripts) {
//     mainClassName = 'com.apidemo.grpc.HelloServer'
//     applicationName = 'hello-server'
//     outputDir = new File(project.buildDir, 'tmp')
//     classpath = startScripts.classpath
// }

// task helloClient(type: CreateStartScripts) {
//     mainClassName = 'com.apidemo.grpc.HelloClient'
//     applicationName = 'hello-client'
//     outputDir = new File(project.buildDir, 'tmp')
//     classpath = startScripts.classpath
// }

// applicationDistribution.into('bin') {
//   from(helloServer)
//   from(helloClient)
//   fileMode = 0755
// }

compileJava.dependsOn(processResources)

application {
    // Define the main class for the application.
    //mainClass = 'com.apidemo.rest.apps.SimpleSpringBootApp' // simple Spring Boot app
    //mainClass = 'com.apidemo.rest.apps.SpringAutoConfigs' // Spring boot auto-configuration exclude and include
    //mainClass = 'com.apidemo.rest.apps.SpringAppBuilder' // Usage of SpringAppBuilder
    //mainClass = 'com.apidemo.rest.apps.SpringApplicationArgs' // Passing arguments via command line
    //mainClass = 'com.apidemo.rest.apps.SpringBootRunners' // usage of ApplicationRunner and CommandLineRunner
    //mainClass = 'com.apidemo.rest.apps.ApplicationConfigParams' // application config parameters
    //mainClass = 'com.apidemo.rest.apps.SpringBootCustomProps' // custom properties in application.properties and profile based

    mainClass = 'com.apidemo.rest.ToDoApplication'
}
